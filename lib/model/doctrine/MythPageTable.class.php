<?php
/**
 * This class has been auto-generated by the Doctrine ORM Framework
 */
class MythPageTable extends Doctrine_Table
{
  public function getCategoriesByMythId($myth_id, $is_active = false)
  {  
    $categories = array();
    
    $q = Doctrine_Query::create()
      ->select('m.myth_category')
      ->from('MythPage m')
      ->where('m.myth_id = '.$myth_id);
       
    $q = DocTools::addIsActive($q, $is_active);
    
    $myths = $q->execute();

    foreach ($myths as $myth)
    {
      $categories[] = $myth->getmyth_category();
    }

    // to order by app categories list
    return array_intersect(sfConfig::get('app_myth_categories'), $categories);
  }
  
  /**
   * get an array like widget choices but without existant categories
   *
   **/
  public function getFreeCategoriesChoices($object)
  {  
    $busy_categories = $this->getCategoriesByMythId($object->getMythId());

    foreach (sfConfig::get('app_myth_categories') as $category) 
    {
      (array_search($category, $busy_categories) === false) ? $choices[$category] = $category : null;
    }
    
    return $choices;
  }
  
  public function getOneWithCategoryAndMyth($myth_id, $category = null, $is_active = false)
  {
    if (is_null($category))
    {
      $categories = $this->getCategoriesByMythId($myth_id, $is_active);
      
      if (empty($categories))
      {
        return false;
      } 
      
      $category = current($categories);
    }

    $q = $this->createQuery('m')
      ->where('m.myth_id = ?', $myth_id)
      ->andWhere('m.myth_category = ? ', $category);

    ($is_active === true || $is_active === false) ? $q->andWhere('m.is_active = ?', $is_active) : null;

    return $q->execute()->getFirst();
  }
  
  public function getBySearch($query)
  {
    return GlobalDoctrineModel::searching($this, $query);
  }
  
  public function countMythPages($myth_id, $is_active = false)
  {
    $q = Doctrine_Query::create()
      ->select('COUNT(m.id)')
      ->from('MythPage m')
      ->where('m.myth_id = '.$myth_id);
      
    $q = DocTools::addIsActive($q, $is_active);
    $count = $q->fetchArray();

    if (intval($count[0]['COUNT']) === 0) 
    {
      return null;
    }
      
    return intval($count[0]['COUNT']);
  }
  
  public function batchActivedCollection($ids, $is_active = false)
  {
    foreach ($ids as $id)
    {
      $myth_page = Doctrine::getTable('MythPage')->find($id); 

      if (!is_object($myth_page))
      {
        throw new Exception("Myth %d inexistant", $id);
      }
      
      $myth_page->setIsActive($is_active);
      $myth_page->save(); 
    }
    
    return 1;
  }
}